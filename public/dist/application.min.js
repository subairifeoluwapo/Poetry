"use strict";var ApplicationConfiguration=function(){var applicationModuleName="poetry",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("poems"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","Authentication","Poems",function($scope,$http,Authentication,Poems){$scope.authentication=Authentication,$scope.find=function(){$scope.poems=Poems.query()},$scope.findSpecificPoem=function(){var url="poems/search",config={params:{}};void 0===$scope.searchForPoem||$scope.searchForPoem.length<4?($scope.invalidSearch="Please enter a valid search",$scope.noPoems=""):($scope.invalidSearch="",config.params.q=$scope.searchForPoem,config.params.catg=$scope.searchForPoem,$scope.loading=!0,$http.get(url,config).success(function(response){$scope.invalidSearch="",$scope.loading=!1,0===response.length?($scope.noPoems="No poems matching that title or category",$scope.searchForPoem=""):($scope.noPoems="",$scope.foundPoems=response)}))}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("poems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Poems","poems","dropdown","/poems(/create)?"),Menus.addSubMenuItem("topbar","poems","Discover Poems","poems"),Menus.addSubMenuItem("topbar","poems","Compose New Poem","poems/create"),Menus.addSubMenuItem("topbar","poems","My Poems","mypoems")}]),angular.module("poems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPoems",{url:"/poems",templateUrl:"modules/poems/views/list-poems.client.view.html"}).state("createPoem",{url:"/poems/create",templateUrl:"modules/poems/views/create-poem.client.view.html"}).state("myPoems",{url:"/mypoems",templateUrl:"modules/poems/views/my-poems.client.view.html"}).state("viewPoem",{url:"/poems/:poemId",templateUrl:"modules/poems/views/view-poem.client.view.html"}).state("editPoem",{url:"/poems/:poemId/edit",templateUrl:"modules/poems/views/edit-poem.client.view.html"}).state("commentlikers",{url:"/poems/:poemId/comment/:commentId/likers",templateUrl:"modules/poems/views/commentlikers-poem.client.view.html"}).state("poemlikers",{url:"/poems/:poemId/likers",templateUrl:"modules/poems/views/poemlikers-poem.client.view.html"}).state("otherwise",{url:"#!/"})}]),angular.module("poems").controller("PoemsController",["$scope","$http","$state","$stateParams","$location","Authentication","Poems","Comments","LikesPoem","LikesComment",function($scope,$http,$state,$stateParams,$location,Authentication,Poems,Comments,LikesPoem,LikesComment){$scope.authentication=Authentication,$scope.liked=!1,$scope.create=function(){if($scope.title.length<4)$scope.invalidPoemContent="",$scope.invalidPoemCategory="",$scope.invalidPoemTitle="Your poem title must be a word with atleat 3 letters";else if($scope.category.length<4)$scope.invalidPoemContent="",$scope.invalidPoemTitle="",$scope.invalidPoemCategory="Please enter one or more categories";else if($scope.content.length<100||$scope.content.length>500)$scope.invalidPoemTitle="",$scope.invalidPoemCategory="",$scope.invalidPoemContent="Your poem content must be between 15 to 150 words";else{$scope.invalidPoemCategory="",$scope.invalidPoemTitle="",$scope.invalidPoemContent="";var poem=new Poems({title:this.title,content:this.content,category:this.category});poem.$save(function(response){$location.path("poems/"+response._id),$scope.title="",$scope.content="",$scope.category=""},function(errorResponse){$scope.error=errorResponse.data.message})}},$scope.update=function(){var poem=$scope.poem;poem.$update(function(){$location.path("poems/"+poem._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.makeComment=function(){if($scope.commentMade.length<3||void 0===$scope.commentMade)$scope.emptycomment="please enter a word with 3 or more letters";else{$scope.emptycomment="";var comment=new Comments({poemId:this.poem._id,comment:this.commentMade});comment.$save(function(response){$scope.poem=response},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.commentMade=""}},$scope.remove=function(poem){if(poem){poem.$remove();for(var i in $scope.poems)$scope.poems[i]===poem&&$scope.poems.splice(i,1)}else $scope.poem.$remove(function(){$location.path("poems")})},$scope.deleteComment=function(){var comm=new Comments({poemId:$scope.poem._id,_id:this.comment._id});comm.$remove(function(response){$scope.poem=response})},$scope.likePoem=function(){var likepoem=new LikesPoem({poemId:this.poem._id,choose:"like"});likepoem.$save(function(response){$scope.poem=response,$scope.liked=!0},function(errorResponse){$scope.likeError=errorResponse.data.message})},$scope.unlikePoem=function(){var unlikepoem=new LikesPoem({poemId:this.poem._id,choose:"unlike"});unlikepoem.$unsave(function(response){$scope.poem=response,$scope.liked=!1},function(errorResponse){$scope.likeError=errorResponse.data.message})},$scope.checkUserPoemLikes=function(likes){for(var i in likes)if(likes[i].user===$scope.authentication.user._id)return $scope.liked=!0,!0;return!1},$scope.likeComment=function(){var likecomment=new LikesComment({poemId:$scope.poem._id,_id:this.comment._id,choose:"like"});likecomment.$save(function(response){$scope.poem=response,$scope.hidelike=1},function(errorResponse){$scope.likeError=errorResponse.data.message})},$scope.unlikeComment=function(){var unlikecomment=new LikesComment({poemId:$scope.poem._id,_id:this.comment._id,choose:"unlike"});unlikecomment.$unsave(function(response){$scope.poem=response},function(errorResponse){$scope.likeError=errorResponse.data.message})},$scope.checkUserCommentLikes=function(likes){for(var i in likes)if(likes[i].user===$scope.authentication.user._id)return $scope.hidelike=1,!0;return!1},$scope.find=function(){$scope.poems=Poems.query()},$scope.findOne=function(){$scope.poem=Poems.get({poemId:$stateParams.poemId,commentId:$stateParams.commentId})},$scope.revealPoemLikers=function(){$scope.showMeNow=!0},$scope.revealCommentLikers=function(){$scope.showMNow=!0},$scope.hidePoemLikers=function(){$scope.showMeNow=!1},$scope.hideCommentLikers=function(){$scope.showMNow=!1}}]),angular.module("poems").factory("Comments",["$resource",function($resource){return $resource("poems/:poemId/comments/:commentId",{poemId:"@poemId",commentId:"@_id"})}]),angular.module("poems").factory("LikesPoem",["$resource",function($resource){return $resource("poems/:poemId/:choose",{},{save:{method:"POST",params:{choose:"like",poemId:"@poemId"}},unsave:{method:"DELETE",params:{choose:"unlike",poemId:"@poemId"}}})}]),angular.module("poems").factory("LikesComment",["$resource",function($resource){return $resource("poems/:poemId/comments/:commentId/:choose",{},{save:{method:"POST",params:{choose:"like",poemId:"@poemId",commentId:"@_id"}},unsave:{method:"DELETE",params:{choose:"unlike",poemId:"@poemId",commentId:"@_id"}}})}]),angular.module("poems").factory("Poems",["$resource",function($resource){return $resource("poems/:poemId",{poemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.EMAIL_REGEXP=/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,$scope.url_regex=/^(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})?$/,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.removeError=function(){$scope.error=null}}]),angular.module("users").directive("ngConfirmField",function(){return{require:"ngModel",scope:{confirmAgainst:"="},link:function(scope,iElement,iAttrs,ngModelCtrl){var updateValidity=function(){var viewValue=ngModelCtrl.$viewValue,isValid=isFieldValid();return ngModelCtrl.$viewValue&&ngModelCtrl.$setValidity("noMatch",isValid),isValid?viewValue:void 0},isFieldValid=function(){return ngModelCtrl.$viewValue===scope.confirmAgainst};ngModelCtrl.$parsers.push(updateValidity),scope.$watch("confirmAgainst",updateValidity)}}}),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.EMAIL_REGEXP=/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,$scope.url_regex=/^(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})?$/,$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.EMAIL_REGEXP=/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,$scope.url_regex=/^(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})?$/,$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.removeAlert=function(message){"error"===message?$scope.error=null:$scope.success=null},$scope.findUser=function(){$http.get("/users/me").success(function(response){$scope.owner=response})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})},$scope.removeUserAccount=function(){var url="/users/accounts";$http.delete(url).success(function(response){console.log(response)})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);